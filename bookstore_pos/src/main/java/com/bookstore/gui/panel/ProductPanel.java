package com.bookstore.gui.panel;

import com.bookstore.controller.ProductController;
import com.bookstore.model.Product;

import com.bookstore.gui.component.TextField;
import com.bookstore.gui.component.Button;
import com.bookstore.gui.component.CustomTable;
import com.bookstore.gui.util.ColorScheme;

import javax.swing.*;
import java.awt.*;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;
import javax.swing.border.LineBorder;
import javax.swing.table.DefaultTableModel;
import java.util.List; 
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.SQLException;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.awt.FileDialog;
import java.awt.image.BufferedImage;
import java.io.FileOutputStream;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

public class ProductPanel extends JPanel {

    private ProductController controller;
    
    private TextField productID;
    private TextField productName;
    private TextField author;
    private TextField price;
    private TextField categoryId;
    private TextField imagePath;
    private TextField searchProduct;
    private Button btnSearch, btnAdd, btnUpdate, btnDelete, btnReset, btnClear, btnImportFile, btnExportFile, btnImagePath;
    private JComboBox<String> cboSearchType;

    private CustomTable productsTable;
    private DefaultTableModel productsTableModel;
    private JLabel imagePreviewLabel;
    private static final String PRODUCT_IMAGE_PATH = "product/";
    private static final String IMAGE_EXTENSION = ".jpg";
    private String tempImagePath;

    public ProductPanel() {
//        controller = new ProductController(this);
        tempImagePath = "";
        initializeUI();
        loadProductData();
    }

    private void initializeUI() {
        this.setLayout(new BorderLayout(10, 10));
        setBorder(new EmptyBorder(10, 10, 10, 10));
        JPanel northPanel = new JPanel(new BorderLayout());

        // Left panel
        JPanel leftPanel = new JPanel(new BorderLayout());
        leftPanel.setPreferredSize(new Dimension(570, 0)); 
        Border thickBorder = new LineBorder(ColorScheme.BORDER, 2);
        leftPanel.setBorder(BorderFactory.createTitledBorder(thickBorder, "Nh·∫≠p th√¥ng tin"));

        // Ph·∫ßn b√™n tr√°i: Vi·ªÅn ƒë·ªÉ ch·ª©a ·∫£nh
        JPanel imagePanel = new JPanel();
        imagePanel.setPreferredSize(new Dimension(150, 100)); 
        imagePanel.setBorder(BorderFactory.createLineBorder(java.awt.Color.BLACK, 1));
        imagePanel.setLayout(new BorderLayout()); // ƒê·ªÉ JLabel cƒÉn gi·ªØa
        imagePreviewLabel = new JLabel();
        imagePreviewLabel.setHorizontalAlignment(JLabel.CENTER);
        imagePanel.add(imagePreviewLabel, BorderLayout.CENTER);
        leftPanel.add(imagePanel, BorderLayout.WEST);

        // Ph·∫ßn b√™n ph·∫£i: C√°c √¥ TextField 
        JPanel fieldsPanel = new JPanel(new GridBagLayout());
        GridBagConstraints gbcL = new GridBagConstraints();
        gbcL.insets = new Insets(5, 2, 2, 2); 
        gbcL.fill = GridBagConstraints.HORIZONTAL;

        // C·ªôt 1
        gbcL.gridx = 0;
        gbcL.gridy = 0;
        productID = new TextField();
        productID.setPlaceholder("ID: [T·ª± ƒë·ªông tƒÉng]");
        productID.setFocusable(false);
        productID.setPreferredSize(new Dimension(150, 25));
        productID.setBackground(new java.awt.Color(224, 224, 224));
        fieldsPanel.add(productID, gbcL);

        gbcL.gridy = 1;
        productName = new TextField();
        productName.setPlaceholder("Nh·∫≠p t√™n s·∫£n ph·∫©m...");
        productName.setPreferredSize(new Dimension(150, 25));
        ColorScheme.styleTextField(productName);
        fieldsPanel.add(productName, gbcL);

        gbcL.gridy = 2;
        author = new TextField();
        author.setPlaceholder("Nh·∫≠p t√™n t√°c gi·∫£...");
        author.setPreferredSize(new Dimension(150, 25));
        ColorScheme.styleTextField(author);
        fieldsPanel.add(author, gbcL);

        // C·ªôt 2
        gbcL.gridx = 1;
        gbcL.gridy = 0;
        price = new TextField();
        price.setPlaceholder("Nh·∫≠p gi√° s·∫£n ph·∫©m...");
        price.setPreferredSize(new Dimension(150, 25));
        ColorScheme.styleTextField(price);
        fieldsPanel.add(price, gbcL);

        gbcL.gridy = 1;
        categoryId = new TextField();
        categoryId.setPlaceholder("Nh·∫≠p ID danh m·ª•c...");
        categoryId.setPreferredSize(new Dimension(150, 25));
        ColorScheme.styleTextField(categoryId);
        fieldsPanel.add(categoryId, gbcL);

        gbcL.gridy = 2;
        imagePath = new TextField();
        imagePath.setPlaceholder("Nh·∫≠p ƒë∆∞·ªùng d·∫´n ·∫£nh...");
        imagePath.setPreferredSize(new Dimension(150, 25));
        imagePath.setText(PRODUCT_IMAGE_PATH); // M·∫∑c ƒë·ªãnh l√† "product/"
        imagePath.setFocusable(true); // Kh√¥ng cho ph√©p ch·ªânh s·ª≠a tr·ª±c ti·∫øp
        ColorScheme.styleTextField(imagePath);
        fieldsPanel.add(imagePath, gbcL);
        
        gbcL.gridx = 2;
        btnImagePath = new Button("File");
        btnImagePath.setPreferredSize(new Dimension(60, 25));
        ColorScheme.styleButton(btnImagePath, false);
        fieldsPanel.add(btnImagePath, gbcL);
        leftPanel.add(fieldsPanel, BorderLayout.CENTER);
        btnImagePath.addActionListener(e -> openFileExplorer());
        

        // Right panel (gi·∫£m k√≠ch th∆∞·ªõc)
        JPanel rightPanel = new JPanel(new GridBagLayout());
        rightPanel.setBorder(BorderFactory.createTitledBorder(thickBorder, "Thanh ch·ª©c nƒÉng"));
        Dimension buttonSize = new Dimension(120, 25);
        GridBagConstraints gbcR = new GridBagConstraints();
        gbcR.insets = new Insets(5, 5, 2, 5);
        gbcR.gridx = 0;
        gbcR.gridy = 0;
        gbcR.fill = GridBagConstraints.HORIZONTAL;

        searchProduct = new TextField();
        searchProduct.setPlaceholder("Nh·∫≠p th√¥ng tin t√¨m ki·∫øm...");
        searchProduct.setPreferredSize(new Dimension(175, 25));
        ColorScheme.styleTextField(searchProduct);
        rightPanel.add(searchProduct, gbcR);

        gbcR.gridy = 2;
        gbcR.fill = GridBagConstraints.NONE;
        gbcR.anchor = GridBagConstraints.WEST;
        gbcR.gridwidth = 1;
        btnAdd = new Button("Th√™m‚ûï");
        btnAdd.setPreferredSize(new Dimension(155, 25));
        ColorScheme.styleButton(btnAdd, false);
        rightPanel.add(btnAdd, gbcR);
        btnAdd.addActionListener(e -> addProduct());

        gbcR.gridy = 1;
        btnReset = new Button("L√†m m·ªõi b·∫£ngüîÑ");
        btnReset.setPreferredSize(new Dimension(155, 25));
        ColorScheme.styleButton(btnReset, false);
        rightPanel.add(btnReset, gbcR);
        btnReset.addActionListener(e -> loadProductData());

        gbcR.insets = new Insets(5, 0, 2, 10);
        gbcR.gridx = 1;
        gbcR.gridy = 2;
        btnUpdate = new Button("S·ª≠a ‚úè");
        btnUpdate.setPreferredSize(buttonSize);
        ColorScheme.styleButton(btnUpdate, false);
        rightPanel.add(btnUpdate, gbcR);
        btnUpdate.addActionListener(e -> updateProduct());

        gbcR.insets = new Insets(5, 0, 2, 10);
        cboSearchType = new JComboBox<>(new String[]{"T√¨m theo ID", "T√¨m theo t√™n", "T√¨m theo t√°c gi·∫£", "T√¨m theo ID danh m·ª•c"});
        
        gbcR.gridy = 0;
        rightPanel.add(cboSearchType, gbcR);

        gbcR.gridy = 1;
        btnClear = new Button("Clear üóëÔ∏è");
        btnClear.setPreferredSize(buttonSize);
        ColorScheme.styleButton(btnClear, false);
        rightPanel.add(btnClear, gbcR);
        btnClear.addActionListener(e -> clearTextField());

        gbcR.gridx = 2;
        gbcR.gridy = 2;
        btnDelete = new Button("X√≥a üö´Ô∏è");
        btnDelete.setPreferredSize(buttonSize);
        ColorScheme.styleButton(btnDelete, false);
        rightPanel.add(btnDelete, gbcR);
        btnDelete.addActionListener(e -> deleteProduct());

        gbcR.gridy = 1;
        btnImportFile = new Button("Nh·∫≠p File üì•");
        btnImportFile.setPreferredSize(buttonSize);
        ColorScheme.styleButton(btnImportFile, false);
        rightPanel.add(btnImportFile, gbcR);
        btnImportFile.addActionListener(e -> importFromExcel());

        gbcR.gridy = 0;
        btnSearch = new Button("T√¨m ki·∫øm üîç");
        btnSearch.setPreferredSize(buttonSize);
        ColorScheme.styleButton(btnSearch, false);
        rightPanel.add(btnSearch, gbcR);
        btnSearch.addActionListener(e -> searchProduct());

        gbcR.gridx = 3;
        gbcR.gridy = 2;
        btnExportFile = new Button("Xu·∫•t File üì§");
        btnExportFile.setPreferredSize(buttonSize);
        ColorScheme.styleButton(btnExportFile, false);
        rightPanel.add(btnExportFile, gbcR);
        btnExportFile.addActionListener(e -> exportToExcel());
        northPanel.add(leftPanel, BorderLayout.WEST);
        northPanel.add(rightPanel, BorderLayout.EAST);
        this.add(northPanel, BorderLayout.NORTH);
        controller = new ProductController(this);

        JPanel centerPanel = new JPanel(new BorderLayout());
        centerPanel.setBorder(BorderFactory.createTitledBorder(thickBorder, "Danh s√°ch s·∫£n ph·∫©m"));

        String[] columns = {"ID", "T√™n s·∫£n ph·∫©m", "T√°c gi·∫£", "Gi√°", "ID Danh m·ª•c", "ƒê∆∞·ªùng d·∫´n ·∫£nh"};
        productsTable = new CustomTable(columns);
        productsTableModel = new DefaultTableModel(columns, 0) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        productsTable.setModel(productsTableModel);
        productsTable.getTableHeader().setReorderingAllowed(false);
        productsTable.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                if (evt.getClickCount() == 2 && !evt.isConsumed()) { // Nh·∫•p ƒë√∫p
                    int row = productsTable.getSelectedRow();
                    if (row >= 0) {
                        fillTextFieldsFromSelectedRow(row);
                    }
                }
            }
        });
        JScrollPane productsScrollPane = new JScrollPane(productsTable);
        productsScrollPane.setBorder(BorderFactory.createLineBorder(ColorScheme.BORDER));
        productsScrollPane.setPreferredSize(new Dimension(800, 600));
        productsTable.getColumnModel().getColumn(0).setPreferredWidth(50);   // ID
        productsTable.getColumnModel().getColumn(1).setPreferredWidth(200);  // T√™n s·∫£n ph·∫©m
        productsTable.getColumnModel().getColumn(2).setPreferredWidth(150);  // T√°c gi·∫£
        productsTable.getColumnModel().getColumn(3).setPreferredWidth(100);  // Gi√°
        productsTable.getColumnModel().getColumn(4).setPreferredWidth(80);   // ID Danh m·ª•c
        productsTable.getColumnModel().getColumn(5).setPreferredWidth(200);  // ƒê∆∞·ªùng d·∫´n ·∫£nh

        centerPanel.add(productsScrollPane, BorderLayout.CENTER);
        this.add(centerPanel, BorderLayout.CENTER);
        
    }
    
    public void loadProductData(){
        productsTableModel.setRowCount(0);
        List<Product> products = controller.getAllProduct();
        for(Product product : products){
            String imagePathWithId = PRODUCT_IMAGE_PATH + product.getId() + IMAGE_EXTENSION;
            productsTableModel.addRow(new Object[]{product.getId(), product.getName(), product.getAuthor(),
                product.getPrice(), product.getCategoryId(), imagePathWithId} );
        }
    }
    
    public void fillTextFieldsFromSelectedRow(int row){
        Object productIdValue = productsTableModel.getValueAt(row, 0);
        Object nameValue = productsTableModel.getValueAt(row, 1);
        Object authorValue = productsTableModel.getValueAt(row,  2);
        Object priceValue = productsTableModel.getValueAt(row, 3);
        Object categoryIdValue = productsTableModel.getValueAt(row, 4);
        Object imagePathValue = productsTableModel.getValueAt(row, 5);
        
        productID.setText(productIdValue.toString());
        productName.setText(nameValue.toString());
        author.setText(authorValue.toString());
        price.setText(priceValue.toString());
        categoryId.setText(categoryIdValue.toString());
        imagePath.setText("product/default_img.png");
        
        if (imagePathValue != null && !imagePathValue.toString().isEmpty()) {
            // T·∫°o ƒë∆∞·ªùng d·∫´n ·∫£nh theo ƒë·ªãnh d·∫°ng product/{id}.jpg
            String imageResourcePath = PRODUCT_IMAGE_PATH + productIdValue + IMAGE_EXTENSION;
            imagePath.setText(PRODUCT_IMAGE_PATH + productIdValue + IMAGE_EXTENSION );
            ImageIcon scaledIcon = loadImage(imageResourcePath);
            imagePreviewLabel.setIcon(scaledIcon);
        } else {
            imagePreviewLabel.setIcon(loadImage(null)); // Hi·ªÉn th·ªã placeholder
        }
    }
    
    public void clearTextField(){
        productID.setText("");
        productName.setText("");
        author.setText("");
        price.setText("");
        categoryId.setText("");
        imagePath.setText(PRODUCT_IMAGE_PATH); // ƒê·∫∑t l·∫°i m·∫∑c ƒë·ªãnh
        searchProduct.setText("");
        tempImagePath = "";
        imagePreviewLabel.setIcon(null);
        imagePreviewLabel.revalidate();
        imagePreviewLabel.repaint();
    }
    
    public void addProduct() {
        String productName = this.productName.getText().trim();
        String author = this.author.getText().trim();
        String priceText = this.price.getText().trim();
        String categoryIdText = this.categoryId.getText().trim();

        // Ki·ªÉm tra ƒë·∫ßu v√†o
        if (productName.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p t√™n s·∫£n ph·∫©m!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (author.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p t√™n t√°c gi·∫£!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (priceText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p gi√° s·∫£n ph·∫©m!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (categoryIdText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p ID danh m·ª•c!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            double price = Double.parseDouble(priceText);
            int categoryId = Integer.parseInt(categoryIdText);

            // T·∫°o ƒë·ªëi t∆∞·ª£ng Product
            Product newProduct = new Product(0, productName, author, price, categoryId, PRODUCT_IMAGE_PATH + IMAGE_EXTENSION); // ID = 0 v√¨ t·ª± tƒÉng

            // G·ªçi controller
            int newProductId = controller.addProduct(newProduct);
            
            // C·∫≠p nh·∫≠t imagePath trong CSDL v·ªõi ID m·ªõi
            String updatedImagePath = PRODUCT_IMAGE_PATH + newProductId + IMAGE_EXTENSION;
            Product updatedProduct = new Product(newProductId, productName, author, price, categoryId, updatedImagePath);
            boolean updateSuccess = controller.updateProduct(updatedProduct);
            if (!updateSuccess) {
                throw new SQLException("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t imagePath cho s·∫£n ph·∫©m ID: " + newProductId);
            }
            
            // N·∫øu ng∆∞·ªùi d√πng ch·ªçn ·∫£nh m·ªõi, sao ch√©p ·∫£nh v√†o th∆∞ m·ª•c resources
            if (!tempImagePath.isEmpty()) {
                String destPath = "src/main/resources/" + PRODUCT_IMAGE_PATH + newProductId + IMAGE_EXTENSION;
                File destFile = new File(destPath);
                if (destFile.exists()) {
                    int confirm = JOptionPane.showConfirmDialog(
                        this,
                        "File ·∫£nh product/" + newProductId + ".jpg ƒë√£ t·ªìn t·∫°i. B·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?",
                        "X√°c nh·∫≠n ghi ƒë√®",
                        JOptionPane.YES_NO_OPTION
                    );
                    if (confirm == JOptionPane.YES_OPTION) {
                        Files.copy(new File(tempImagePath).toPath(), Paths.get(destPath), StandardCopyOption.REPLACE_EXISTING);
                    }
                } else {
                    Files.copy(new File(tempImagePath).toPath(), Paths.get(destPath), StandardCopyOption.REPLACE_EXISTING);
                }
            }

            // L√†m m·ªõi b·∫£ng
            loadProductData();
            // X√≥a c√°c √¥ nh·∫≠p li·ªáu
            clearTextField();
            JOptionPane.showMessageDialog(this, "Th√™m s·∫£n ph·∫©m th√†nh c√¥ng! ID: " + newProductId, "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Gi√° ho·∫∑c ID danh m·ª•c kh√¥ng h·ª£p l·ªá!", "L·ªói", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "L·ªói c∆° s·ªü d·ªØ li·ªáu: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi sao ch√©p file ·∫£nh: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void deleteProduct() {
        String idText = productID.getText().trim();
        if (idText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ x√≥a!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }
        try {
            int id = Integer.parseInt(idText);
            boolean success = controller.deleteProduct(id);
            if (success) {
                // X√≥a file ·∫£nh n·∫øu t·ªìn t·∫°i
                String imageFilePath = "src/main/resources/" + PRODUCT_IMAGE_PATH + id + IMAGE_EXTENSION;
                File imageFile = new File(imageFilePath);
                if (imageFile.exists()) {
                    imageFile.delete();
                }
                
                productsTableModel.setRowCount(0);
                loadProductData();
                clearTextField();
                JOptionPane.showMessageDialog(this, "X√≥a s·∫£n ph·∫©m th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ x√≥a s·∫£n ph·∫©m!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID kh√¥ng h·ª£p l·ªá!", "L·ªói", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "L·ªói c∆° s·ªü d·ªØ li·ªáu!", "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void updateProduct(){
        String idText = productID.getText().trim();
        String nameText = productName.getText().trim();
        String priceText = price.getText().trim();
        String authorText = author.getText().trim();
        String categoryIdText = categoryId.getText().trim();
        
        if (idText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Vui l√≤ng ch·ªçn s·∫£n ph·∫©m ƒë·ªÉ s·ª≠a!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (nameText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (authorText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "T√™n t√°c gi·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        if (priceText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Gi√° s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (categoryIdText.isEmpty()) {
            JOptionPane.showMessageDialog(this, "M√£ danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }

        try {
            int id = Integer.parseInt(idText); 
            String name = nameText; 
            String authorValue = authorText;
            double priceValue = Double.parseDouble(priceText); 
            int categoryIdValue = Integer.parseInt(categoryIdText); 
            String image = PRODUCT_IMAGE_PATH; // Lu√¥n gi·ªØ ƒë∆∞·ªùng d·∫´n chung

            // T·∫°o ƒë·ªëi t∆∞·ª£ng Product m·ªõi
            Product updatedProduct = new Product(id, name, authorValue, priceValue, categoryIdValue, image);

            // N·∫øu c√≥ ·∫£nh m·ªõi ƒë∆∞·ª£c ch·ªçn, sao ch√©p ·∫£nh v√†o th∆∞ m·ª•c resources
            if (!tempImagePath.isEmpty()) {
                String destPath = "src/main/resources/" + PRODUCT_IMAGE_PATH + id + IMAGE_EXTENSION;
                File destFile = new File(destPath);
                if (destFile.exists()) {
                    int confirm = JOptionPane.showConfirmDialog(
                        this,
                        "File ·∫£nh product/" + id + ".jpg ƒë√£ t·ªìn t·∫°i. B·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?",
                        "X√°c nh·∫≠n ghi ƒë√®",
                        JOptionPane.YES_NO_OPTION
                    );
                    if (confirm == JOptionPane.YES_OPTION) {
                        Files.copy(new File(tempImagePath).toPath(), Paths.get(destPath), StandardCopyOption.REPLACE_EXISTING);
                    }
                } else {
                    Files.copy(new File(tempImagePath).toPath(), Paths.get(destPath), StandardCopyOption.REPLACE_EXISTING);
                }
            }

            // G·ªçi controller ƒë·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m
            boolean success = controller.updateProduct(updatedProduct);
            if (success) {
                loadProductData(); // L√†m m·ªõi b·∫£ng
                clearTextField();  // X√≥a c√°c √¥ nh·∫≠p
                JOptionPane.showMessageDialog(this, "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th√†nh c√¥ng!", "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t s·∫£n ph·∫©m!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID, gi√° ho·∫∑c m√£ danh m·ª•c kh√¥ng h·ª£p l·ªá!", "L·ªói", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "L·ªói khi sao ch√©p file ·∫£nh: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }

    public void searchProduct(){
        String searchText = searchProduct.getText();
        String searchType = (String) cboSearchType.getSelectedItem();
        if(searchText.isEmpty()){
            JOptionPane.showMessageDialog(this, "Vui l√≤ng nh·∫≠p th√¥ng tin ƒë·ªÉ t√¨m ki·∫øm!", "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }
        productsTableModel.setRowCount(0);
        try{
           List<Product> results;
           if("T√¨m theo ID".equals(searchType)){
               int id = Integer.parseInt(searchText);
               Product product = controller.searchById(id);
               if(product != null){
                   productsTableModel.addRow(new Object[]{
                       product.getId(),
                       product.getName(),
                       product.getAuthor(),
                       product.getPrice(),
                       product.getCategoryId(),
                       product.getImagePath()
                   });
               }else{
                   JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi ID: " + searchText, "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
               }
           }else if("T√¨m theo t√™n".equals(searchType)){
               results = controller.searchByName(searchText);
               if (results != null && !results.isEmpty()){
                   for(Product product : results){
                       productsTableModel.addRow(new Object[]{
                            product.getId(),
                            product.getName(),
                            product.getAuthor(),
                            product.getPrice(),
                            product.getCategoryId(),
                            product.getImagePath()
                       });
                   }
               }else{
                   JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi t√™n s·∫£n ph·∫©m: " + searchText, "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
               }
           }else if("T√¨m theo t√°c gi·∫£".equals(searchType)){
               results = controller.searchByAuthor(searchText);
               if (results != null && !results.isEmpty()){
                   for(Product product : results){
                       productsTableModel.addRow(new Object[]{
                            product.getId(),
                            product.getName(),
                            product.getAuthor(),
                            product.getPrice(),
                            product.getCategoryId(),
                            product.getImagePath()
                       });
                   }
               }else{
                   JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi t√™n t√°c gi·∫£: " + searchText, "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
               }
           }else if("T√¨m theo ID danh m·ª•c".equals(searchType)){
               int categoryId = Integer.parseInt(searchText);
               results = controller.searchByCategoryId(categoryId);
               if (results != null && !results.isEmpty()){
                   for(Product product : results){
                       productsTableModel.addRow(new Object[]{
                            product.getId(),
                            product.getName(),
                            product.getAuthor(),
                            product.getPrice(),
                            product.getCategoryId(),
                            product.getImagePath()
                       });
                   }
               }else{
                   JOptionPane.showMessageDialog(this, "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m v·ªõi categoryID: " + searchText, "Th√¥ng b√°o", JOptionPane.INFORMATION_MESSAGE);
               }
           }
        }catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "ID ph·∫£i l√† m·ªôt s·ªë h·ª£p l·ªá!", "L·ªói", JOptionPane.ERROR_MESSAGE);
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(this, e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "ƒê√£ x·∫£y ra l·ªói khi t√¨m ki·∫øm: " + e.getMessage(), "L·ªói", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    public void openFileExplorer() {
        FileDialog fileDialog = new FileDialog((Frame) SwingUtilities.getWindowAncestor(this), "Ch·ªçn ·∫£nh", FileDialog.LOAD);
        fileDialog.setFile("*.jpg;*.png;*.jpeg;*.gif");
        fileDialog.setFilenameFilter((dir, name) -> {
            String lowercaseName = name.toLowerCase();
            return lowercaseName.endsWith(".jpg") || lowercaseName.endsWith(".png") || 
                   lowercaseName.endsWith(".jpeg") || lowercaseName.endsWith(".gif");
        });

        fileDialog.setVisible(true);

        String directory = fileDialog.getDirectory();
        String file = fileDialog.getFile();

        if (directory != null && file != null) {
            String filePath = directory + file;
            tempImagePath = filePath; // L∆∞u ƒë∆∞·ªùng d·∫´n t·∫°m th·ªùi ƒë·ªÉ d√πng khi th√™m/s·ª≠a s·∫£n ph·∫©m
            imagePath.setText(PRODUCT_IMAGE_PATH); // Hi·ªÉn th·ªã ƒë∆∞·ªùng d·∫´n chung trong TextField

            try {
                // T·∫£i ·∫£nh t·ª´ ƒë∆∞·ªùng d·∫´n ngo√†i
                ImageIcon originalIcon = new ImageIcon(filePath);
                Image scaledImage = originalIcon.getImage().getScaledInstance(150, 100, Image.SCALE_SMOOTH);
                ImageIcon scaledIcon = new ImageIcon(scaledImage);
                imagePreviewLabel.setIcon(scaledIcon);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(this, "Kh√¥ng th·ªÉ t·∫£i ·∫£nh: " + ex.getMessage(), 
                    "L·ªói", JOptionPane.ERROR_MESSAGE);
                imagePreviewLabel.setIcon(loadImage(null)); // Hi·ªÉn th·ªã placeholder
            }
        }
    }
    
    private ImageIcon loadImage(String path) {
        final int WIDTH = 150;
        final int HEIGHT = 100;
        final String DEFAULT_IMAGE_PATH = "product/default_img.png";

        try {
            String finalPath = (path == null || path.trim().isEmpty()) ? DEFAULT_IMAGE_PATH : path;

            // T√¨m ·∫£nh t·ª´ classpath (resource)
            java.net.URL imageUrl = getClass().getClassLoader().getResource(finalPath);

            // N·∫øu kh√¥ng t√¨m th·∫•y, th·ª≠ ·∫£nh m·∫∑c ƒë·ªãnh
            if (imageUrl == null) {
                imageUrl = getClass().getClassLoader().getResource(DEFAULT_IMAGE_PATH);
            }

            // N·∫øu v·∫´n kh√¥ng c√≥, t·∫°o ·∫£nh tr·ªëng "No Image"
            if (imageUrl == null) {
                BufferedImage emptyImage = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
                Graphics2D g2d = emptyImage.createGraphics();
                g2d.setColor(java.awt.Color.GRAY);
                g2d.fillRect(0, 0, WIDTH, HEIGHT);
                g2d.setColor(java.awt.Color.BLACK);
                g2d.drawString("No Image", WIDTH / 2 - 30, HEIGHT / 2);
                g2d.dispose();
                return new ImageIcon(emptyImage);
            }

            // Load ·∫£nh v√† scale
            ImageIcon icon = new ImageIcon(imageUrl);
            Image scaledImage = icon.getImage().getScaledInstance(WIDTH, HEIGHT, Image.SCALE_SMOOTH);
            return new ImageIcon(scaledImage);

        } catch (Exception e) {
            System.err.println("Error loading image: " + path + " - " + e.getMessage());
            BufferedImage emptyImage = new BufferedImage(WIDTH, HEIGHT, BufferedImage.TYPE_INT_RGB);
            Graphics2D g2d = emptyImage.createGraphics();
            g2d.setColor(java.awt.Color.GRAY);
            g2d.fillRect(0, 0, WIDTH, HEIGHT);
            g2d.setColor(java.awt.Color.BLACK);
            g2d.drawString("No Image", WIDTH / 2 - 30, HEIGHT / 2);
            g2d.dispose();
            return new ImageIcon(emptyImage);
        }
    }

    
    public void importFromExcel() {
        FileDialog fileDialog = new FileDialog((Frame) SwingUtilities.getWindowAncestor(this), "Ch·ªçn file Excel", FileDialog.LOAD);
        fileDialog.setFile("*.xlsx;*.xls");
        fileDialog.setFilenameFilter((dir, name) -> {
            String lowercaseName = name.toLowerCase();
            return lowercaseName.endsWith(".xlsx") || lowercaseName.endsWith(".xls");
        });

        fileDialog.setVisible(true);

        String directory = fileDialog.getDirectory();
        String file = fileDialog.getFile();

        if (directory != null && file != null) {
            String excelFilePath = directory + file;
            try (FileInputStream fis = new FileInputStream(excelFilePath);
                 Workbook workbook = new XSSFWorkbook(fis)) {

                Sheet sheet = workbook.getSheetAt(0);
                int rowCount = 0;

                for (Row row : sheet) {
                    if (rowCount == 0) {
                        rowCount++;
                        continue;
                    }

                    String name = getCellValueAsString(row.getCell(1));
                    String author = getCellValueAsString(row.getCell(2));
                    String priceText = getCellValueAsString(row.getCell(3));
                    String categoryIdText = getCellValueAsString(row.getCell(4));
                    String imagePathText = getCellValueAsString(row.getCell(5));

                    if (name.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "T√™n s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng (d√≤ng " + (rowCount + 1) + ")", 
                            "L·ªói", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                    if (author.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "T√™n t√°c gi·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng (d√≤ng " + (rowCount + 1) + ")", 
                            "L·ªói", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                    if (priceText.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "Gi√° s·∫£n ph·∫©m kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng (d√≤ng " + (rowCount + 1) + ")", 
                            "L·ªói", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                    if (categoryIdText.isEmpty()) {
                        JOptionPane.showMessageDialog(this, "ID danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng (d√≤ng " + (rowCount + 1) + ")", 
                            "L·ªói", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }

                    try {
                        double price = Double.parseDouble(priceText);
                        int categoryId = Integer.parseInt(categoryIdText);

                        // S·ª≠ d·ª•ng ƒë∆∞·ªùng d·∫´n m·∫∑c ƒë·ªãnh
                        String imagePathToSave = PRODUCT_IMAGE_PATH;

                        Product product = new Product(0, name, author, price, categoryId, imagePathToSave);
                        int newProductId = controller.addProduct(product);

                        // N·∫øu c√≥ ƒë∆∞·ªùng d·∫´n ·∫£nh trong file Excel, sao ch√©p ·∫£nh v√†o th∆∞ m·ª•c resources
                        if (!imagePathText.isEmpty()) {
                            File imageFile = new File(imagePathText);
                            if (imageFile.exists()) {
                                String destPath = "src/main/resources/" + PRODUCT_IMAGE_PATH + newProductId + IMAGE_EXTENSION;
                                File destFile = new File(destPath);
                                if (destFile.exists()) {
                                    int confirm = JOptionPane.showConfirmDialog(
                                        this,
                                        "File ·∫£nh product/" + newProductId + ".jpg ƒë√£ t·ªìn t·∫°i. B·∫°n c√≥ mu·ªën ghi ƒë√® kh√¥ng?",
                                        "X√°c nh·∫≠n ghi ƒë√®",
                                        JOptionPane.YES_NO_OPTION
                                    );
                                    if (confirm == JOptionPane.YES_OPTION) {
                                        Files.copy(imageFile.toPath(), Paths.get(destPath), StandardCopyOption.REPLACE_EXISTING);
                                    }
                                } else {
                                    Files.copy(imageFile.toPath(), Paths.get(destPath), StandardCopyOption.REPLACE_EXISTING);
                                }
                            } else {
                                JOptionPane.showMessageDialog(this, "File ·∫£nh kh√¥ng t·ªìn t·∫°i: " + imagePathText + " (d√≤ng " + (rowCount + 1) + ")", 
                                    "C·∫£nh b√°o", JOptionPane.WARNING_MESSAGE);
                            }
                        }

                    } catch (NumberFormatException e) {
                        JOptionPane.showMessageDialog(this, "Gi√° ho·∫∑c ID danh m·ª•c kh√¥ng h·ª£p l·ªá (d√≤ng " + (rowCount + 1) + ")", 
                            "L·ªói", JOptionPane.ERROR_MESSAGE);
                        continue;
                    } catch (SQLException e) {
                        JOptionPane.showMessageDialog(this, "L·ªói c∆° s·ªü d·ªØ li·ªáu (d√≤ng " + (rowCount + 1) + "): " + e.getMessage(), 
                            "L·ªói", JOptionPane.ERROR_MESSAGE);
                        continue;
                    } catch (IOException e) {
                        JOptionPane.showMessageDialog(this, "L·ªói khi sao ch√©p file ·∫£nh (d√≤ng " + (rowCount + 1) + "): " + e.getMessage(), 
                            "L·ªói", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }

                    rowCount++;
                }

                loadProductData();
                JOptionPane.showMessageDialog(this, "Nh·∫≠p d·ªØ li·ªáu t·ª´ Excel th√†nh c√¥ng! ƒê√£ th√™m " + (rowCount - 1) + " s·∫£n ph·∫©m.", 
                    "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "L·ªói khi ƒë·ªçc file Excel: " + e.getMessage(), 
                    "L·ªói", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage(), 
                    "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        }
    }

    private String getCellValueAsString(Cell cell) {
        if (cell == null) {
            return "";
        }
        switch (cell.getCellType()) {
            case STRING:
                return cell.getStringCellValue().trim();
            case NUMERIC:
                if (DateUtil.isCellDateFormatted(cell)) {
                    return cell.getDateCellValue().toString();
                } else {
                    double numericValue = cell.getNumericCellValue();
                    if (numericValue == Math.floor(numericValue)) {
                        return String.valueOf((int) numericValue);
                    } else {
                        return String.valueOf(numericValue);
                    }
                }
            case BOOLEAN:
                return String.valueOf(cell.getBooleanCellValue());
            default:
                return "";
        }
    }
    public void exportToExcel() {
        // Ki·ªÉm tra n·∫øu b·∫£ng r·ªóng
        if (productsTable.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "B·∫£ng s·∫£n ph·∫©m tr·ªëng! Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.", 
                "L·ªói", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Hi·ªÉn th·ªã FileDialog ƒë·ªÉ ng∆∞·ªùi d√πng ch·ªçn n∆°i l∆∞u file
        FileDialog fileDialog = new FileDialog((Frame) SwingUtilities.getWindowAncestor(this), "L∆∞u file Excel", FileDialog.SAVE);
        fileDialog.setFile("SanPham.xlsx"); // T√™n file m·∫∑c ƒë·ªãnh
        fileDialog.setFilenameFilter((dir, name) -> name.toLowerCase().endsWith(".xlsx"));

        fileDialog.setVisible(true);

        String directory = fileDialog.getDirectory();
        String file = fileDialog.getFile();

        if (directory != null && file != null) {
            // ƒê·∫£m b·∫£o t√™n file c√≥ ƒëu√¥i .xlsx
            if (!file.toLowerCase().endsWith(".xlsx")) {
                file += ".xlsx";
            }
            String excelFilePath = directory + file;

            try (Workbook workbook = new XSSFWorkbook()) {
                // T·∫°o sheet
                Sheet sheet = workbook.createSheet("S·∫£n ph·∫©m");

                // T·∫°o d√≤ng ti√™u ƒë·ªÅ
                Row headerRow = sheet.createRow(0);
                String[] columns = {"ID", "T√™n s·∫£n ph·∫©m", "T√°c gi·∫£", "Gi√°", "ID danh m·ª•c", "ƒê∆∞·ªùng d·∫´n ·∫£nh"};
                for (int i = 0; i < columns.length; i++) {
                    Cell cell = headerRow.createCell(i);
                    cell.setCellValue(columns[i]);
                }

                // Ghi d·ªØ li·ªáu t·ª´ b·∫£ng
                for (int rowIndex = 0; rowIndex < productsTable.getRowCount(); rowIndex++) {
                    Row row = sheet.createRow(rowIndex + 1); // B·∫Øt ƒë·∫ßu t·ª´ d√≤ng 1 (sau ti√™u ƒë·ªÅ)
                    for (int colIndex = 0; colIndex < productsTable.getColumnCount(); colIndex++) {
                        Cell cell = row.createCell(colIndex);
                        Object value = productsTable.getValueAt(rowIndex, colIndex);
                        if (value != null) {
                            if (colIndex == 0 || colIndex == 4) { // C·ªôt ID v√† ID danh m·ª•c (s·ªë nguy√™n)
                                try {
                                    cell.setCellValue(Integer.parseInt(value.toString()));
                                } catch (NumberFormatException e) {
                                    cell.setCellValue(value.toString());
                                }
                            } else if (colIndex == 3) { // C·ªôt Gi√° (s·ªë th·ª±c)
                                try {
                                    cell.setCellValue(Double.parseDouble(value.toString()));
                                } catch (NumberFormatException e) {
                                    cell.setCellValue(value.toString());
                                }
                            } else { // C√°c c·ªôt chu·ªói (T√™n s·∫£n ph·∫©m, T√°c gi·∫£, ƒê∆∞·ªùng d·∫´n ·∫£nh)
                                cell.setCellValue(value.toString());
                            }
                        }
                    }
                }

                // T·ª± ƒë·ªông ƒëi·ªÅu ch·ªânh k√≠ch th∆∞·ªõc c·ªôt
                for (int i = 0; i < columns.length; i++) {
                    sheet.autoSizeColumn(i);
                }

                // Ghi file Excel
                try (FileOutputStream fos = new FileOutputStream(excelFilePath)) {
                    workbook.write(fos);
                    JOptionPane.showMessageDialog(this, "Xu·∫•t d·ªØ li·ªáu sang Excel th√†nh c√¥ng! File ƒë∆∞·ª£c l∆∞u t·∫°i: " + excelFilePath, 
                        "Th√†nh c√¥ng", JOptionPane.INFORMATION_MESSAGE);
                }

            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "L·ªói khi ghi file Excel: " + e.getMessage(), 
                    "L·ªói", JOptionPane.ERROR_MESSAGE);
            } catch (Exception e) {
                JOptionPane.showMessageDialog(this, "ƒê√£ x·∫£y ra l·ªói: " + e.getMessage(), 
                    "L·ªói", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
        public void updateButtonsVisibility(boolean canAdd, boolean canEdit, boolean canDelete) {
        if (btnAdd != null) {
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã n√∫t th√™m
            btnAdd.setVisible(canAdd);
            btnImportFile.setVisible(canAdd);
            
        }
        
        if (btnUpdate != null) {
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã n√∫t s·ª≠a
            btnUpdate.setVisible(canEdit);
        }
        
        if (btnDelete != null) {
            // C·∫≠p nh·∫≠t hi·ªÉn th·ªã n√∫t x√≥a
            btnDelete.setVisible(canDelete);
            
        }
        

    }
    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Qu·∫£n l√Ω s·∫£n ph·∫©m");
            frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
            frame.setSize(1200, 800);
            frame.setLocationRelativeTo(null);
            frame.setContentPane(new ProductPanel());
            frame.setVisible(true);
        });
    }
}